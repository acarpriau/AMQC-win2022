location /kibananyx/ {

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-NginX-Proxy true;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    resolver 127.0.0.11;
    access_by_lua_block{
      url = ngx.var.request_uri

      args, err = ngx.req.get_uri_args()

      if string.match(url, "api/rollup") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "api/license") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "api/console/proxy") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "app/timelion") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "app/canvas") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "app/infra") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "app/apm") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      for key, val in pairs(args) do
         if (val == "title") and (key=="fields") then
           ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
           return
         end
         if (val == "dashboard") and (key=="type") then
           ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
           return
         end
      end

      if string.match(url, "api/index_management/") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "saved_objects/index-pattern") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      if string.match(url, "api/spaces") then
        ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
        return
      end

      local redis = require "resty.redis"
      local red = redis:new()
      red:set_timeout(1000) -- 1 sec

      local ok, err = red:connect("redis", 6379)
      if not ok then
         ngx.exit(ngx.HTTP_FORBIDDEN)
         return
      end

      tok=ngx.var.cookie_nyx_kibananyx
      if not tok then
         ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
         return
      end

      rediskey="nyx_tok_"..tok
      local res, err = red:get(rediskey)
      if not res then
         ngx.exit(ngx.HTTP_CONFLICT)
         return
      end

      if res == ngx.null then
         ngx.exit(ngx.HTTP_NOT_ALLOWED)
         return
      end

      if string.match( ngx.var.request_uri,"_msearch") then
         ngx.req.read_body()
         red:set("nyx_kib_msearch"..tok,ngx.var.request_body)
      end
   }

   proxy_pass http://kibananyx:5601/;
   proxy_redirect off;

   limit_except PUT GET POST HEAD OPTIONS {
     deny all;
   }
}
